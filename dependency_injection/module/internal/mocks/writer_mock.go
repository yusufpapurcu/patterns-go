// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/yusufpapurcu/patterns-go/dependency_injection/module"
	"sync"
)

// Ensure, that WriterMock does implement module.Writer.
// If this is not the case, regenerate this file with moq.
var _ module.Writer = &WriterMock{}

// WriterMock is a mock implementation of module.Writer.
//
//	func TestSomethingThatUsesWriter(t *testing.T) {
//
//		// make and configure a mocked module.Writer
//		mockedWriter := &WriterMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			WriteEmailsFunc: func(emails ...string) error {
//				panic("mock out the WriteEmails method")
//			},
//		}
//
//		// use mockedWriter in code that requires module.Writer
//		// and then make assertions.
//
//	}
type WriterMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// WriteEmailsFunc mocks the WriteEmails method.
	WriteEmailsFunc func(emails ...string) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// WriteEmails holds details about calls to the WriteEmails method.
		WriteEmails []struct {
			// Emails is the emails argument value.
			Emails []string
		}
	}
	lockClose       sync.RWMutex
	lockWriteEmails sync.RWMutex
}

// Close calls CloseFunc.
func (mock *WriterMock) Close() error {
	if mock.CloseFunc == nil {
		panic("WriterMock.CloseFunc: method is nil but Writer.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedWriter.CloseCalls())
func (mock *WriterMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// WriteEmails calls WriteEmailsFunc.
func (mock *WriterMock) WriteEmails(emails ...string) error {
	if mock.WriteEmailsFunc == nil {
		panic("WriterMock.WriteEmailsFunc: method is nil but Writer.WriteEmails was just called")
	}
	callInfo := struct {
		Emails []string
	}{
		Emails: emails,
	}
	mock.lockWriteEmails.Lock()
	mock.calls.WriteEmails = append(mock.calls.WriteEmails, callInfo)
	mock.lockWriteEmails.Unlock()
	return mock.WriteEmailsFunc(emails...)
}

// WriteEmailsCalls gets all the calls that were made to WriteEmails.
// Check the length with:
//
//	len(mockedWriter.WriteEmailsCalls())
func (mock *WriterMock) WriteEmailsCalls() []struct {
	Emails []string
} {
	var calls []struct {
		Emails []string
	}
	mock.lockWriteEmails.RLock()
	calls = mock.calls.WriteEmails
	mock.lockWriteEmails.RUnlock()
	return calls
}
